import tkinter as tk
from tkinter import messagebox, simpledialog
from tkinter import ttk

class InventoryManager:
    def __init__(self):
        self.products = {}
        self.user_authenticated = False

    def authenticate_user(self, username, password):
        # Simple user authentication (replace with secure method in production)
        return username == "admin" and password == "password"

    def add_product(self, name, quantity, price):
        if name in self.products:
            messagebox.showwarning("Warning", "Product already exists!")
            return
        self.products[name] = {'quantity': quantity, 'price': price}
        messagebox.showinfo("Success", f"Added {name} to inventory.")

    def edit_product(self, name, quantity, price):
        if name not in self.products:
            messagebox.showwarning("Warning", "Product not found!")
            return
        self.products[name] = {'quantity': quantity, 'price': price}
        messagebox.showinfo("Success", f"Updated {name} in inventory.")

    def delete_product(self, name):
        if name in self.products:
            del self.products[name]
            messagebox.showinfo("Success", f"Deleted {name} from inventory.")
        else:
            messagebox.showwarning("Warning", "Product not found!")

    def generate_report(self):
        low_stock = [name for name, details in self.products.items() if details['quantity'] < 5]
        if low_stock:
            report = "Low Stock Products:\n" + "\n".join(low_stock)
        else:
            report = "No low stock products."
        messagebox.showinfo("Inventory Report", report)

class InventoryApp:
    def __init__(self, root):
        self.manager = InventoryManager()
        self.root = root
        self.root.title("Inventory Management System")

        # User Authentication
        self.authenticate()

        # GUI Elements
        self.name_label = tk.Label(root, text="Product Name:")
        self.name_label.pack(pady=5)
        self.name_entry = tk.Entry(root)
        self.name_entry.pack(pady=5)

        self.quantity_label = tk.Label(root, text="Quantity:")
        self.quantity_label.pack(pady=5)
        self.quantity_entry = tk.Entry(root)
        self.quantity_entry.pack(pady=5)

        self.price_label = tk.Label(root, text="Price:")
        self.price_label.pack(pady=5)
        self.price_entry = tk.Entry(root)
        self.price_entry.pack(pady=5)

        self.add_button = tk.Button(root, text="Add Product", command=self.add_product)
        self.add_button.pack(pady=5)

        self.edit_button = tk.Button(root, text="Edit Product", command=self.edit_product)
        self.edit_button.pack(pady=5)

        self.delete_button = tk.Button(root, text="Delete Product", command=self.delete_product)
        self.delete_button.pack(pady=5)

        self.report_button = tk.Button(root, text="Generate Report", command=self.generate_report)
        self.report_button.pack(pady=5)

    def authenticate(self):
        username = simpledialog.askstring("Username", "Enter username:")
        password = simpledialog.askstring("Password", "Enter password:", show='*')
        if self.manager.authenticate_user(username, password):
            self.manager.user_authenticated = True
        else:
            messagebox.showerror("Error", "Authentication failed.")
            self.root.destroy()

    def add_product(self):
        name = self.name_entry.get()
        try:
            quantity = int(self.quantity_entry.get())
            price = float(self.price_entry.get())
            self.manager.add_product(name, quantity, price)
            self.clear_entries()
        except ValueError:
            messagebox.showerror("Error", "Please enter valid quantity and price.")

    def edit_product(self):
        name = self.name_entry.get()
        try:
            quantity = int(self.quantity_entry.get())
            price = float(self.price_entry.get())
            self.manager.edit_product(name, quantity, price)
            self.clear_entries()
        except ValueError:
            messagebox.showerror("Error", "Please enter valid quantity and price.")

    def delete_product(self):
        name = self.name_entry.get()
        self.manager.delete_product(name)
        self.clear_entries()

    def generate_report(self):
        self.manager.generate_report()

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.quantity_entry.delete(0, tk.END)
        self.price_entry.delete(0, tk.END)

def main():
    root = tk.Tk()
    app = InventoryApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
